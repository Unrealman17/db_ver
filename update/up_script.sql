-- version = 44
/*
    you can use "\i 'function/reclada_object.get_schema.sql'"
    to run text script of functions
*/

CREATE TYPE reclada.dp_bhvr AS ENUM ('Replace','Update','Reject','Copy','Insert','Merge');

CREATE TABLE reclada_object.cr_dup_behavior (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    parent_guid     uuid,
    transaction_id  bigint,
    dup_behavior    reclada.dp_bhvr,
    last_use        timestamp DEFAULT current_timestamp,
    PRIMARY KEY     (transaction_id, parent_guid)
);

DROP VIEW reclada.v_pk_for_class;

\i 'view/reclada.v_object_unifields.sql'
\i 'view/reclada.v_parent_field.sql'
\i 'function/reclada.get_unifield_index_name.sql'
\i 'view/reclada.v_unifields_idx_cnt.sql'
\i 'view/reclada.v_unifields_pivoted.sql'

\i 'function/reclada_object.get_parent_guid.sql'
\i 'function/reclada_object.get_query_condition_filter.sql'
\i 'function/reclada_object.merge.sql'
\i 'function/reclada_object.update_json.sql'
\i 'function/reclada_object.update_json_by_guid.sql'
\i 'function/reclada_object.remove_parent_guid.sql'
\i 'function/reclada_object.create.sql'
\i 'function/reclada_object.create_subclass.sql'
\i 'function/reclada_object.delete.sql'
\i 'function/reclada_object.update.sql'
\i 'function/reclada_object.refresh_mv.sql'
\i 'function/reclada_object.update.sql'
\i 'function/reclada.get_children.sql'
\i 'function/reclada_object.datasource_insert.sql'
\i 'function/reclada.get_duplicates.sql'
\i 'function/reclada_object.add_cr_dup_mark.sql'
\i 'function/reclada_object.parse_filter.sql'

\i 'function/reclada_object.list.sql'
\i 'function/api.reclada_object_list.sql'
\i 'function/reclada_object.get_query_condition_filter.sql'
\i 'function/api.reclada_object_create.sql'
\i 'function/reclada_object.delete.sql'

\i 'view/reclada.v_filter_avaliable_operator.sql'
\i 'view/reclada.v_ui_active_object.sql'

UPDATE reclada.object
SET attributes = jsonb_set(attributes,'{parentField}','"table"'::jsonb)
WHERE guid IN (SELECT reclada_object.get_guid_for_class('Cell')) and status = reclada_object.get_active_status_obj_id();

UPDATE reclada.object
SET attributes = jsonb_set(attributes,'{parentField}','"page"'::jsonb)
WHERE guid IN (SELECT reclada_object.get_guid_for_class('Table')) and status = reclada_object.get_active_status_obj_id();

UPDATE reclada.object
SET attributes = jsonb_set(attributes,'{parentField}','"document"'::jsonb)
WHERE guid IN (SELECT reclada_object.get_guid_for_class('Page')) and status = reclada_object.get_active_status_obj_id();

UPDATE reclada.object
SET attributes = jsonb_set(attributes,'{parentField}','"fileGUID"'::jsonb)
WHERE guid IN (SELECT reclada_object.get_guid_for_class('Document')) and status = reclada_object.get_active_status_obj_id();

UPDATE reclada.object
SET attributes = jsonb_set(attributes,'{parentField}','"table"'::jsonb)
WHERE guid IN (SELECT reclada_object.get_guid_for_class('DataRow')) and status = reclada_object.get_active_status_obj_id();

UPDATE reclada.object
SET attributes = jsonb_set(attributes,'{dupBehavior}','"Replace"'::jsonb)
WHERE guid IN (SELECT reclada_object.get_guid_for_class('File')) and status = reclada_object.get_active_status_obj_id();

UPDATE reclada.object
SET attributes = jsonb_set(attributes,'{isCascade}','true'::jsonb)
WHERE guid IN (SELECT reclada_object.get_guid_for_class('File')) and status = reclada_object.get_active_status_obj_id();

UPDATE reclada.object
SET attributes = jsonb_set(attributes,'{dupChecking}','[{"uniFields" : ["uri"], "isMandatory" : true}, {"uniFields" : ["checksum"], "isMandatory" : true}]'::jsonb)
WHERE guid IN (SELECT reclada_object.get_guid_for_class('File')) and status = reclada_object.get_active_status_obj_id();

SELECT reclada_object.refresh_mv('uniFields');


CREATE INDEX uri_index_ ON reclada.object USING HASH (((attributes->>'uri')));
CREATE INDEX checksum_index_ ON reclada.object USING HASH (((attributes->>'checksum')));

--{ display
with t as
( 
    update reclada.object
        set status = reclada_object.get_active_status_obj_id()
        where attributes->>'function' = 'reclada_object.list'
            and class in (select reclada_object.get_guid_for_class('DTOJsonSchema'))
            and status = reclada_object.get_archive_status_obj_id()
        returning id
)
    update reclada.object
        set status = reclada_object.get_archive_status_obj_id()
        where attributes->>'function' = 'reclada_object.list'
            and class in (select reclada_object.get_guid_for_class('DTOJsonSchema'))
            and id not in (select id from t);
--} display

--------------default----------------

UPDATE reclada.object
SET attributes = '{
    "schema": {
        "id": "expr",
        "type": "object",
        "required": [
          "value",
          "operator"
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                },
                {
                  "type": "number"
                },
                {
                  "$ref": "expr"
                },{
                        "type": "boolean"
                      },
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  }
                }
              ]
            },
            "minItems": 1
          },
          "operator": {
            "type": "string"
          }
        }
      },
    "function": "reclada_object.get_query_condition_filter"
}'::jsonb
WHERE attributes->>'function' = 'reclada_object.get_query_condition_filter';

UPDATE reclada.object
SET attributes = (SELECT jsonb_set(attributes, '{schema, properties}', attributes #> '{schema, properties}' || '{"disable": {"type": "boolean", "default": false}}'::jsonb))
WHERE class IN (SELECT reclada_object.get_GUID_for_class('jsonschema'))
AND attributes->>'forClass' != 'ObjectDisplay'
AND attributes->>'forClass' != 'jsonschema';

--------------------------------------------------
-- v_class_lite, v_class, v_object, v_active_object
\i 'function/reclada_object.built_nested_jsonb.sql'

DROP VIEW IF EXISTS reclada.v_unifields_idx_cnt;
DROP VIEW IF EXISTS reclada.v_unifields_pivoted;
DROP MATERIALIZED VIEW IF EXISTS reclada.v_object_unifields;
DROP VIEW IF EXISTS reclada.v_parent_field;
DROP VIEW IF EXISTS reclada.v_class;
DROP VIEW IF EXISTS reclada.v_import_info;
DROP VIEW IF EXISTS reclada.v_revision;
DROP VIEW IF EXISTS reclada.v_ui_active_object;
DROP VIEW IF EXISTS reclada.v_DTO_json_schema;
DROP VIEW IF EXISTS reclada.v_active_object;
DROP VIEW IF EXISTS reclada.v_object;
DROP MATERIALIZED VIEW IF EXISTS reclada.v_class_lite;
DROP MATERIALIZED VIEW IF EXISTS reclada.v_user;
DROP MATERIALIZED VIEW IF EXISTS reclada.v_object_status;



\i 'view/reclada.v_class_lite.sql'
\i 'view/reclada.v_object_status.sql'
\i 'view/reclada.v_user.sql'
\i 'view/reclada.v_object.sql'
\i 'view/reclada.v_active_object.sql'
\i 'view/reclada.v_DTO_json_schema.sql'
\i 'view/reclada.v_ui_active_object.sql'
\i 'view/reclada.v_revision.sql'
\i 'view/reclada.v_import_info.sql'
\i 'view/reclada.v_class.sql'
\i 'view/reclada.v_parent_field.sql'
\i 'view/reclada.v_object_unifields.sql'
\i 'view/reclada.v_unifields_pivoted.sql'
\i 'view/reclada.v_unifields_idx_cnt.sql'
