stages:
  - prepare
  - deploy
  - triggers
  - clean
  - clean_db
  - autotest
  - push_to_github

variables:
 ENV:
   value: "parchitest" # default value
   description: "You need to have *ENV*.json in Configurations repository" 
 WEBUI_VERSION:
   value: "test_parent_child" # default value
   description: "Version of Web-UI component"
 RUNTIME_VERSION:
   value: "test_parent_child" # default value
   description: "Version of Reclada Runtime component" 
 SCINLP_VERSION:
   value: "test_parent_child" # default value
   description: "Version of Scinlp component" 
 DESTROY:  
   value: "false" # default value
   description: "If true - complete cleanup" 
 RECLADA_REGISTRY:
   value: "false" # default value
   description: "If true - images pulls from gitlab registry" # makes this variable appear on the Run Pipeline

prepare_db:
  stage: prepare
  image: bitnami/git
  script:
    - > # choosing the Registry for all images
     if [ "${RECLADA_REGISTRY}" == "false" ]; then
       echo "REPO_URL=588200329560.dkr.ecr.eu-west-1.amazonaws.com" >> prepare.env
     else
       echo "REPO_URL=registry.reclada.com/developers/${CI_PROJECT_TITLE}" >> prepare.env
     fi

    - echo ENV=$ENV >> prepare.env
    - echo NAMESPACE = reclada-$ENV >> prepare.env
    - echo DBNAME = "${ENV}_reclada_k8s" >> prepare.env 
    - echo LAMBDA_NAME = "s3_get_presigned_url_${ENV}" >> prepare.env
    - echo LAMBDA_REGION = "eu-west-1" >> prepare.env
  artifacts:
    reports:
      dotenv: prepare.env
  rules:   
    - if: $CI_PIPELINE_SOURCE == "web"
      when: always
  tags:
    - k8s-devops

deploy_db:
  stage: deploy
  image: $REPO_URL/db-installer:0.1
  script:
    - echo "Cloning configurations from all repos"
    
    - cd $CI_PROJECT_DIR/
    - git clone -b $CI_COMMIT_REF_NAME https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/db.git
   # - git clone -b $WEBUI_VERSION https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/webui.git
    - git clone -b $RUNTIME_VERSION https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/reclada-runtime.git
    - git clone -b $SCINLP_VERSION https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/scinlp.git
    - git clone https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/configurations.git
    - git clone https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/components.git
    
    - echo "Create database for the environment"
      # here can be changes for db update config
      
    - cp $CI_PROJECT_DIR/reclada-runtime/configuration_default.json $CI_PROJECT_DIR/reclada-runtime/configuration.json
    - sed -i "s|\"LAMBDA_NAME\":.*|\"LAMBDA_NAME\":\ \"$LAMBDA_NAME\",|g" $CI_PROJECT_DIR/reclada-runtime/configuration.json
    - sed -i "s|\"LAMBDA_REGION\":.*|\"LAMBDA_REGION\":\ \"$LAMBDA_REGION\",|g" $CI_PROJECT_DIR/reclada-runtime/configuration.json 
    - sed -i "s|\"ENVIRONMENT_NAME\" :.*|\"ENVIRONMENT_NAME\" :\ \"K8S\"|g" $CI_PROJECT_DIR/reclada-runtime/configuration.json

        #   - sed -i "s|\"branch_db\" :.*|\"branch_db\" :\ \"$CI_COMMIT_REF_NAME\",|g" $CI_PROJECT_DIR/reclada-runtime/configuration.json
        #   - sed -i "s|\"branch_QAAutotests\" :.*|\"branch_QAAutotests\" :\ \"$QA_BRANCH\",|g" $CI_PROJECT_DIR/reclada-runtime/configuration.json
        #   - sed -i "s|\"server\" :.*|\"server\" :\ \"$DEV_RDS\",|g" $CI_PROJECT_DIR/reclada-runtime/configuration.json
        #   - sed -i "s|\"db\" :.*|\"db\" :\ \"$DBNAME\",|g" $CI_PROJECT_DIR/reclada-runtime/configuration.json
        #   - sed -i "s|\"db_user\" :.*|\"db_user\" :\ \"reclada\",|g" $CI_PROJECT_DIR/reclada-runtime/configuration.json
        #   - sed -i "s|\"db_URI\" :.*|\"db_URI\" :\ \"postgresql://reclada:${PGPASSWORD}@${DEV_RDS}:5432/${DBNAME}\",|g" $CI_PROJECT_DIR/reclada-runtime/configuration.json
    
    - echo "Runtime configuration:"
    - cat $CI_PROJECT_DIR/reclada-runtime/configuration.json

    - echo "DB configuration:"
    - cat $CI_PROJECT_DIR/configurations/$ENV.json
    
    - echo "Run the installation script"
    - cd $CI_PROJECT_DIR/components/
    - python installer.py $ENV    

  needs:
    - job: prepare_db
      artifacts: true
  tags:
    - k8s-devops
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "true"
      when: never
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "false"
      when: always
    - if: $CI_COMMIT_REF_NAME == "master"
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never

trigger_runtime:
  stage: triggers
  variables:
    ENV: $ENV
    RUNTIME_BRANCH: $RUNTIME_VERSION
  trigger:
    include:
      - project: 'developers/reclada-runtime'
        ref: '$RUNTIME_BRANCH'
        file: '.child_runtime-gitlab-ci.yml' 
    strategy: depend
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "true"
      when: never
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "false"
      when: always 

trigger_scinlp:
  stage: triggers
  variables:
    ENV: $ENV
    SCINLP_BRANCH: $SCINLP_VERSION
  trigger:
    include:
      - project: 'developers/scinlp'
        ref: '$SCINLP_BRANCH'
        file: '.child_scinlp-gitlab-ci.yml' 
    strategy: depend
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "true"
      when: never
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "false"
      when: always

trigger_webui:
  stage: triggers
  variables:
    ENV: $ENV
    WEBUI_BRANCH: $WEBUI_VERSION
  trigger:
    include:
      - project: 'developers/webui'
        ref: '$WEBUI_BRANCH'
        file: '.child_webui-gitlab-ci.yml' 
    strategy: depend
  needs:
    - job: trigger_runtime
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "true"
      when: never
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "false"
      when: always

deploy-autotest-env:
  stage: deploy
  image: $REPO_URL/db-installer:0.1
  script:
    - echo "Run update database in autotest env"
    
    - echo "Cloning configurations from all repos"
    
    - cd $CI_PROJECT_DIR/
    - git clone -b $CI_COMMIT_REF_NAME https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/db.git
    - git clone -b $WEBUI_VERSION https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/webui.git
    - git clone -b $RUNTIME_VERSION https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/reclada-runtime.git
    - git clone -b $SCINLP_VERSION https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/scinlp.git
    - git clone https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/configurations.git
    - git clone https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/components.git
    
    - echo "Create database for the environment"

    - cd $CI_PROJECT_DIR/components/
    - python installer.py $ENV
  needs:
    - job: prepare_db
      artifacts: true
  tags:
      - k8s-devops
  rules:
    - if: $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test"
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never

test-autotest-env:
  stage: autotest
  image: $REPO_URL/pytest:04
  script:
    - echo "Run some tests for autotest env"

    - export TEST_PARAMETERS_BUCKET="autotest-reclada-bucket"
    - export TEST_PARAMETERS_DATABASE="${TEST_RDS}/autotest_reclada_k8s"
    - export TEST_PARAMETERS_DATABASE_USER="reclada"
    - export TEST_PARAMETERS_DATABASE_PASSWORD="${PG_PASSWORD}"
    # - AWS_ACCESS_KEY_ID = AWS_ACCESS_KEY_ID
    # - AWS_SECRET_ACCESS_KEY = AWS_SECRET_KEY
    # - TEST_PARAMETERS_WEB_BASE_URL = base_url_of_application
    # - TEST_PARAMETERS_WEB_USER = user_for_web_and_rest
    # - TEST_PARAMETERS_WEB_PASSWORD = password_for_web_and_rest
    - cd $CI_PROJECT_DIR/
    - git clone https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/QAAutotests.git
    - cd QAAutotests

    - pytest --version
    - allure --version

    - pytest tests --alluredir allure-results > /dev/null 2>&1 || true
    - allure generate -c ./allure-results -o ./allure-report
    - ls -la ./allure-results
    - ls -la ./allure-report
  allow_failure: true
  artifacts:
    when: always
    paths:
      - QAAutotests/allure-results/
      - QAAutotests/allure-report/
    expire_in: 7 day
  needs:
    - job: deploy-autotest-env
    - job: prepare_db
      artifacts: true
  tags:
      - k8s-devops
  rules:
    - if: $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test"
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never

delete-terraform-dynamic-env:
  stage: clean
  image: $REPO_URL/aws-build:v1.0.0-0
  script:
    - echo "Uninstall lambda/S3"

    - cd $CI_PROJECT_DIR/
    - git clone -b $RUNTIME_VERSION https://gitlab-deploy-token:${DEPLOY_TOKEN}@gitlab.reclada.com/developers/reclada-runtime.git

    - cd $CI_PROJECT_DIR/reclada-runtime/devops/terraform/
    - sed -i "s|PGPASSWORD|$PG_PASSWORD|g" $CI_PROJECT_DIR/reclada-runtime/devops/terraform/variables.tf
    - sed -i "s|ENVPREFIX|$ENV|g" $CI_PROJECT_DIR/reclada-runtime/devops/terraform/variables.tf
    - sed -i "s|RDSINSTANCE|dev-reclada-k8s.c9lpgtggzz0d.eu-west-1.rds.amazonaws.com|g" $CI_PROJECT_DIR/reclada-runtime/devops/terraform/variables.tf
    - cat $CI_PROJECT_DIR/reclada-runtime/devops/terraform/variables.tf
    - ./terraform init
    - ./terraform workspace list
    - ./terraform workspace select ${ENV} || ./terraform workspace new ${ENV}
    - ./terraform destroy -target=aws_s3_bucket_notification.bucket_notification -auto-approve
    - ./terraform destroy -target=aws_lambda_permission.allow_bucket -auto-approve
    - ./terraform destroy -target=aws_s3_bucket_object.output_folder -auto-approve
    - ./terraform destroy -target=aws_s3_bucket_object.inbox_folder -auto-approve
    - ./terraform destroy -target=aws_s3_bucket_policy.AllowPublicRead -auto-approve
    - ./terraform destroy -target=aws_s3_bucket.bucket -auto-approve
    - ./terraform destroy -target=aws_lambda_function.s3_create_datasource_in_db -auto-approve
    - ./terraform destroy -target=aws_iam_role.iam_for_lambda -auto-approve
    - ./terraform destroy -target=module.lambda_function -auto-approve    
  needs:
    - job: prepare_db
      artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "true"
      when: always
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "false"
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"
      when: never
  tags:
    - k8s-devops

delete-k8s-dynamic-env:
  stage: clean
  image: $REPO_URL/helm-kubectl:v1.0.0-0
  script:
    - echo "Uninstall helm charts and k8s namespcase"
    - helm uninstall webui -n $NAMESPACE || true
    - helm uninstall postgrest -n $NAMESPACE || true
    - helm uninstall sshfs -n $NAMESPACE
    - helm uninstall coordinator -n $NAMESPACE
    - kubectl delete ns $NAMESPACE
  needs:
    - job: prepare_db
      artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "true"
      when: always
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "false"
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"
      when: never
  tags:
    - k8s-devops


delete-db-dynamic-env:
  stage: clean_db
  image: $REPO_URL/db-installer:0.1
  script:
    - echo "Uninstall db"
    - echo $CI_COMMIT_MESSAGE
    - psql -h dev-reclada-k8s.c9lpgtggzz0d.eu-west-1.rds.amazonaws.com -p 5432 -U reclada -d postgres -c "DROP DATABASE ${ENV}_reclada_k8s;" || true
  needs:
    - job: delete-terraform-dynamic-env
    - job: prepare_db
      artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "true"
      when: always
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "false"
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"
      when: never
  tags:
    - k8s-devops

push_to_github:
  stage: push_to_github
  image: bitnami/git
  script:

    - echo "Run push to github"
    - mkdir cloned_repo
    - cd cloned_repo
    - git clone -b $CI_COMMIT_BRANCH "${CI_REPOSITORY_URL}"
    - cd $CI_PROJECT_NAME
    - git config --global user.email "Gitlab@reclada.com"
    - git config --global user.name "Gitlab runner"
    - git remote set-url origin https://gitlab:${MY_GITHUB_TOKEN}@github.com/reclada/${CI_PROJECT_NAME}.git
    - rm -rf .gitlab-ci.yml
    - rm -rf devops/

    - git add .
    - >
      if [[ -z "$(git status --porcelain)" ]] ; then
        echo "Nothing to commit. Finished"
      else
        echo "Committing and pushing changes..."
        git commit -a -m "${CI_COMMIT_MESSAGE}"
        git push
      fi

  tags:
      - k8s-devops
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "true"
      when: never
    - if: $CI_PIPELINE_SOURCE == "web" && $DESTROY == "false"
      when: manual
